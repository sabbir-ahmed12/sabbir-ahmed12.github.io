<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://sabbir-ahmed12.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sabbir-ahmed12.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-06-19T13:52:01+00:00</updated><id>https://sabbir-ahmed12.github.io/feed.xml</id><title type="html">blank</title><subtitle>This is Sabbir Ahmed&apos;s personal website.
</subtitle><entry><title type="html">How Can You Run Multiple Versions of Python on Ubuntu and Create Virtual Environments?</title><link href="https://sabbir-ahmed12.github.io/blog/2023/installing-python-on-ubuntu/" rel="alternate" type="text/html" title="How Can You Run Multiple Versions of Python on Ubuntu and Create Virtual Environments?" /><published>2023-06-17T16:15:00+00:00</published><updated>2023-06-17T16:15:00+00:00</updated><id>https://sabbir-ahmed12.github.io/blog/2023/installing-python-on-ubuntu</id><content type="html" xml:base="https://sabbir-ahmed12.github.io/blog/2023/installing-python-on-ubuntu/"><![CDATA[<p>Maintaining multiple python versions of python on ubuntu becomes a issue of headache sometimes as Ubuntu OS already comes with a pre-installed python. Therefore, changing the system python may affect your Ubuntu OS functionality. In this tutorial, I’ll use <code class="language-plaintext highlighter-rouge">pyenv</code> to work with multiple versions of python.</p>

<h2 id="why-should-you-use-pyenv-and-virtual-python-environments">Why should you use <code class="language-plaintext highlighter-rouge">pyenv</code> and Virtual Python Environments?</h2>

<p>As a programmer or as a hobbyist you may want to work on several python projects simultaneously. And most of the projects require different Python versions and some project may require a specific version of a package e.g. specific version of numpy or django. In such cases you’ll need to install multiple versions of python and will have to install several versions of a specific package and that is when virtual environment is required to maintain several python ecosystems based on various projects in isolation. <code class="language-plaintext highlighter-rouge">pyenv</code> makes it easier to maintain various versions of python on ubuntu and unix based systems as those systems by default contains a python version which they uses for various system operations and we don’t wanna mess up with that python version.</p>

<h2 id="how-to-install-pyenv-on-your-ubuntu">How to install <code class="language-plaintext highlighter-rouge">pyenv</code> on your ubuntu?</h2>

<p>To install <code class="language-plaintext highlighter-rouge">pyenv</code> on Debian or Ubuntu based Linux distributions, you’ll have to install several libraries and packages necessary for building Python from scratch. Enter the following command into your terminal to install all the necessary packages.<br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install -y make build-essential libssl-dev zlib1g-dev \
libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \
libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl \
git
</code></pre></div></div>

<p>To install <code class="language-plaintext highlighter-rouge">pyenv</code> you can clone it directly from <a href="https://github.com/pyenv/pyenv">github</a> repository.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/pyenv/pyenv.git ~/.pyenv
</code></pre></div></div>

<p>After that you need to enter the following commands to add <code class="language-plaintext highlighter-rouge">pyenv</code> to your <code class="language-plaintext highlighter-rouge">$PATH</code>. To see the effect you’ll have to open a new terminal.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo 'export PYENV_ROOT="$HOME/.pyenv"' &gt;&gt; ~/.bashrc
echo 'export PATH="$PYENV_ROOT/bin:$PATH"' &gt;&gt; ~/.bashrc
echo 'eval "$(pyenv init --path)"' &gt;&gt; ~/.bashrc
</code></pre></div></div>

<p><strong>If you use <code class="language-plaintext highlighter-rouge">zsh</code>, use <code class="language-plaintext highlighter-rouge">.zshrc</code> instead of <code class="language-plaintext highlighter-rouge">.bashrc</code>.</strong></p>

<h2 id="using-pyenv">Using <code class="language-plaintext highlighter-rouge">pyenv</code></h2>

<p>If you followed the previous steps successfully, you should be able to use <code class="language-plaintext highlighter-rouge">pyenv</code> from your terminal. Type the following command on your terminal to check whether <code class="language-plaintext highlighter-rouge">pyenv</code> successfully installed or not. It should print the pyenv version.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv --version
</code></pre></div></div>

<p>It you get the <code class="language-plaintext highlighter-rouge">pyenv</code> version, congratulations!. Next step is to install Python of your desired version. First check which Python versions are available to you. For that use the following command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv install -l
</code></pre></div></div>

<p>This command will display the various CPython versions(displays just the versions) along with other Python distributions such as Miniconda and Anaconda. In this tutorial we’ll install a CPython version. Let’s say you want to install CPython version 3.9.7. For that execute the following command on you terminal.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv install 3.9.7
</code></pre></div></div>

<p>It’ll take some time to build and install the desired Python version. However after completion of installation, type the following command to see the available python versions on your system.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv versions
</code></pre></div></div>

<p>You’ll find all the Python versions currently installed on your system and the current global version is indicated by an <code class="language-plaintext highlighter-rouge">*</code> on the left. To change the default global version of Python on your system type the following command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv global [PYTHON_VERSION]
</code></pre></div></div>

<p>Or if you want to use a specific version of python for a specific folder i.e. project, navigate to that directory and execute the command below.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv local [PYTHON_VERSION]
</code></pre></div></div>

<p>Or if you want to set a specific Python version for your current terminal session use.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv shell [PYTHON_VERSION]
</code></pre></div></div>

<p>This will set the Python version only as long as your session is active. So after you close your terminal, everything will be back to default.</p>

<h2 id="method-1-creating-virtual-environment-and-installing-package-on-that-environment">Method-1 Creating Virtual Environment and Installing Package on that Environment</h2>

<p>Python installation includes some basic packages and modules. Your Python version should include <code class="language-plaintext highlighter-rouge">pip</code> module by default. So, set the specific Python version as global Python version. After that open a new terminal and you can close the previous session.</p>

<p>After that install <code class="language-plaintext highlighter-rouge">pipenv</code> using <code class="language-plaintext highlighter-rouge">pip</code> command. It will install some dependencies along with <code class="language-plaintext highlighter-rouge">pipenv</code>. Creating and maintaining virtual environment using <code class="language-plaintext highlighter-rouge">pipenv</code> is much easier.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install pipenv
</code></pre></div></div>

<p>You can check the installed packages on your current Python version using <code class="language-plaintext highlighter-rouge">pip list</code> command.</p>

<p>To create virtual environment navigate to your preferred directory and create a folder. Suppose you want to start a django project, type the following command to install django under a virtual environment.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pipenv install django
</code></pre></div></div>

<p>It’ll create an environment at first and then install the latest django version for that environment. It should successfully install django on a virtual environment. You can activate the environment by navigating to that folder and then executing the following command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pipenv shell
</code></pre></div></div>

<p>After activating the environment, you can run django command. e.g. you can try the following command -</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>django-admin
</code></pre></div></div>

<p>For installation of more packages, run the following command keeping the environment activated.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pipenv install [PACKAGE_NAME]
</code></pre></div></div>

<p>Exit the environment by just typing <code class="language-plaintext highlighter-rouge">exit</code>.</p>

<h3 id="deleting-virtual-environment">Deleting Virtual Environment</h3>

<p>You can delete a specific virtual environment from <code class="language-plaintext highlighter-rouge">~/.local/share/virtualenvs/</code> folder. Or you can delete all the virtual environments using -</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rm -rf ~/.local/share/virtualenvs
</code></pre></div></div>

<h2 id="method-2-creating-virtual-environment-and-installing-package-on-that-environment">Method-2 Creating Virtual Environment and Installing Package on that Environment</h2>

<p><code class="language-plaintext highlighter-rouge">pyenv</code> has a wonderful plugin called <code class="language-plaintext highlighter-rouge">pyenv-virtualenv</code> that makes working with multiple environments easy. Please visit the <a href="https://github.com/pyenv/pyenv-virtualenv">link</a> to install <code class="language-plaintext highlighter-rouge">pyenv-virtualenv</code>. After installation, check if it installed properly by running the command <code class="language-plaintext highlighter-rouge">pyenv commands</code>. You should see the commands <code class="language-plaintext highlighter-rouge">virtualenv, virtualenv-delete, virtualenv-init, virtualenv-prefix, virtualenv</code> listed along with the other commands. You can also update your <code class="language-plaintext highlighter-rouge">.bashrc</code> file as mentioned in the documentation of <code class="language-plaintext highlighter-rouge">pyenv-virtualenv</code>.</p>

<p>To create a virtual environment, first create a directory in your preferred place and go to that directory. Then run the following command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv virtualenv &lt;python_version&gt; &lt;environment_name&gt;
</code></pre></div></div>

<p>If you’ve updated your <code class="language-plaintext highlighter-rouge">.bashrc</code> file, you can activate your environment by running the following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv local &lt;environment_name&gt;
</code></pre></div></div>

<p>It creates a <code class="language-plaintext highlighter-rouge">.python-version</code> file in the directory because it internally runs the bash command `eval “$(pyenv virtualenv-init -)”. You can verify it by running the following command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv which python
</code></pre></div></div>

<p>You can see a new version has been created called <environment_name> and the python executable is pointing to that version.</environment_name></p>

<p>If you didn’t modify your <code class="language-plaintext highlighter-rouge">.bashrc</code> file by adding the command <code class="language-plaintext highlighter-rouge">eval "$(pyenv virtualenv-init -)</code>, you can manually activate/deactivate your python versions with this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv activate &lt;environment_name&gt;
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv deactivate
</code></pre></div></div>

<div>
  <b>NOTE: Setting a specific version of python as global python version may sometime cause problems. I found method-2 more friendly and easier to manage different python versions and python environments.</b>
</div>

<h2 id="removing-a-specific-version-of-python">Removing a Specific Version of Python</h2>

<p>You can uninstall a specific python version using <code class="language-plaintext highlighter-rouge">pyenv</code> using -</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv uninstall [PYTHON_VERSION]
</code></pre></div></div>

<p><strong>Before deleting the active Python version, set the Python version to system default.</strong></p>

<h2 id="updating-packages">Updating packages</h2>

<p>If you want a list of outdated packages, run this to see all the packages needing an upgrade.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pipenv update --outdated
</code></pre></div></div>

<p>You can choose to blindly update all packages.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pipenv update
</code></pre></div></div>

<p>Or you can update a specific package one at a time.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pipenv update pandas
</code></pre></div></div>

<h2 id="installing-from-requirementstxt-file">Installing from Requirements.txt file</h2>

<p>If you have a legacy requirements.txt file, <code class="language-plaintext highlighter-rouge">pipenv</code> can be used for that.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pipenv install -r requirements.txt
</code></pre></div></div>

<p>If you want a generate a requirements.txt file, you can run the following command after activating the environment from you project directory.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip freeze &gt; requirements.txt
</code></pre></div></div>

<h2 id="using-virtual-environment-with-vscode">Using Virtual Environment with VSCode</h2>

<p>Open the directory using VS Code. After that open the workspace using <code class="language-plaintext highlighter-rouge">Ctrl + Shift + p</code> and type <code class="language-plaintext highlighter-rouge">settings.json</code>. Select <code class="language-plaintext highlighter-rouge">Preferences: Open Workspace Settings (JSON)</code> and hit <code class="language-plaintext highlighter-rouge">Enter</code> on your keyboard. It should open an empty JSON file. Now inside the file type the following command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "python.terminal.activateEnvironment": true
}
</code></pre></div></div>

<p>Then go to option <code class="language-plaintext highlighter-rouge">run</code> and select <code class="language-plaintext highlighter-rouge">run without debugging</code>. It should automatically activate the environment everytime you run from that directory.</p>]]></content><author><name></name></author><category term="tutorial" /><category term="linux" /><summary type="html"><![CDATA[Tutorial post on installing and maintaining multiple versions of python along with system python.]]></summary></entry></feed>