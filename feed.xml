<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://sabbir-ahmed12.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sabbir-ahmed12.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-01-13T19:23:29+00:00</updated><id>https://sabbir-ahmed12.github.io/feed.xml</id><title type="html">blank</title><subtitle>This is Sabbir Ahmed&apos;s personal website.
</subtitle><entry><title type="html">Learning Linux from Basics to Advanced</title><link href="https://sabbir-ahmed12.github.io/blog/2024/learning-linux-from-basics-to-advanced/" rel="alternate" type="text/html" title="Learning Linux from Basics to Advanced" /><published>2024-07-14T15:03:00+00:00</published><updated>2024-07-14T15:03:00+00:00</updated><id>https://sabbir-ahmed12.github.io/blog/2024/learning-linux-from-basics-to-advanced</id><content type="html" xml:base="https://sabbir-ahmed12.github.io/blog/2024/learning-linux-from-basics-to-advanced/"><![CDATA[<p>Learning Linux is one of the most valuable skills in the tech industry. It helps doing things faster and more efficiently. Many of the world’s powerful servers and supercomputers run on Linux.</p>

<p>In this post, we’ll learn the basics of Linux command line, and then transition to more advanced topics like shell scripting and system administration.</p>

<p><strong>Important Note:</strong> All examples of this post are demonstrated in Ubuntu 22.04 LTS. This blog was written assuming that you’ve a Linux OS already setup for you.</p>

<h2 id="part-1-introduction-to-linux">Part 1: Introduction to Linux</h2>

<h3 id="11-getting-started-with-linux">1.1. Getting Started with Linux</h3>

<h4 id="what-is-linux">What is Linux?</h4>

<p>Linux is an open-source operating system that is based on the Unix Operating System (OS). It was created by Linus Torvalds in 1991. Open source means that the source code of the operating system is available to the public. This allows you to modify the original code, customize it, and distribute the new operating system to potential users.</p>

<h4 id="why-should-you-learn-linux">Why should you learn linux?</h4>

<p>In today’s data center landscape, Linux and Microsoft Windows stand out as the primary contenders, with Linux having a major share.</p>

<p>Some of the compelling reasons to learn Linux are:</p>

<ul>
  <li>
    <p>Given the prevalence of Linux hosting, there is a high chance that your application will be hosted on Linux. So, learning Linux as a developer becomes increasingly valuable.</p>
  </li>
  <li>
    <p>With cloud computing becoming the norm, chances are high that your cloud instance will rely on Linux.</p>
  </li>
  <li>
    <p>Linux serves as the foundation for many operating systems for the Internet of Things (IoT) and mobile applications.</p>
  </li>
  <li>
    <p>Most of the commands you’ll learn can also used in MacOS. Moreover, knowledge of Linux will open many opportunities for you.</p>
  </li>
</ul>

<h4 id="what-is-a-linux-kernel">What is a Linux Kernel?</h4>

<p>The kernel is the central component of an operating system that manages the computer and its hardware operations. It handles memory operations and CPU time. It acts as a bridge between applications and the hardware-level data processing using inter-process communication and system calls.</p>

<p>The kernel is loaded into memory first when an operating system starts and remains there until the system shuts down. It is responsible for tasks like disk management, task management, and memory management.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    

    <!-- Fallback to the original file -->
    <img src="/assets/posts_img/2024_07_14_learning_linux/kernel_layout.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<p>If you’re curious about learning Linux kernel, you can check the GitHub link [here].(https://github.com/torvalds/linux)</p>

<h4 id="what-is-a-linux-distribution">What is a Linux Distribution?</h4>

<p>By this point, you know that you can re-use the Linux kernel code, modify it, and create a new kernel. You can further combine different utilities and software to create a completely new operating system. A Linux distribution or distro is a version of the Linux operating system that includes the Linux kernel, system utilities, and other software. Being open source, a Linux distribution is a collaborative effort involving multiple independent open-source development communities. So, Linux distributions are different flavors of the Linux OS.</p>

<p><strong><em>What does it mean that a distribution is derived?</em></strong>
When you say that a distribution is “derived” from another, the newer distro is built upon the base or foundation of the original distro. This derivation can include using the same package management system (more on this later), kernel version, and sometimes the same configuration tools. Today, there are thousands of Linux distributions to choose from, offering differing goals and criteria for selecting and supporting the software provided by their distribution.</p>

<p>Distributions vary from one to the other, but they generally have several common characteristics:</p>

<ul>
  <li>A distribution consists of a Linux kernel.</li>
  <li>It supports user space programs.</li>
  <li>A distribution may be small and single-purpose or include thousands of open-source programs.</li>
  <li>Some means of installing and updating the distribution and its components should be provided.</li>
</ul>

<p>If you view the <a href="https://upload.wikimedia.org/wikipedia/commons/1/1b/Linux_Distribution_Timeline.svg">Linux Distributions Timeline</a>, you’ll see two major distros: Slackware and Debian. Several distributions are derived from them. For example, Ubuntu and Kali are derived from Debian.</p>

<p>There are various advantages of derivation. Derived distributions can leverage the stability, security, and large software repositories of the parent distribution.</p>

<p>When building on an existing foundation, developers can drive their focus and effort entirely on the specialized features of the new distribution. Users of derived distributions can benefit from the documentation, community support, and resources already available for the parent distribution.</p>

<p>Some popular Linux distributions are: <code class="language-plaintext highlighter-rouge">Ubuntu</code>, <code class="language-plaintext highlighter-rouge">Linux Mint</code>, <code class="language-plaintext highlighter-rouge">Arch Linux</code>, <code class="language-plaintext highlighter-rouge">Manjaro</code>, <code class="language-plaintext highlighter-rouge">Kali Linux</code> etc.</p>

<h2 id="part-2-introduction-to-terminal-console-shell-and-system-commands">Part 2: Introduction to Terminal, Console, Shell and System Commands</h2>

<h3 id="21-introduction-to-terminal-console-and-shell">2.1. Introduction to Terminal, Console and Shell</h3>

<h4 id="what-is-a-terminal">What is a Terminal?</h4>

<p>A terminal is a text-based user interface that allows users to interact with a computer by entering commands and viewing the results. A terminal can be connected to a local or a remote system, depending on the protocol of the network.</p>

<h4 id="what-is-console">What is Console?</h4>

<p>A console is a special type of terminal that is directly attached to the computer system. It is usually the primary interface for system administration and maintenance. It can be a physical device such as a keyboard and a monitor, or a virtual device such as a serial port or graphical window. A console gives you access to the low-level functions and settings of the computer system such as the BIOS, the boot loader or the kernel.</p>]]></content><author><name></name></author><category term="tutorial" /><category term="linux" /><summary type="html"><![CDATA[Tutorial post on linux operating system.]]></summary></entry><entry><title type="html">Formatting Infected Pendrive Forcefully.</title><link href="https://sabbir-ahmed12.github.io/blog/2023/formatting-pendrive-forcefully/" rel="alternate" type="text/html" title="Formatting Infected Pendrive Forcefully." /><published>2023-06-19T08:00:00+00:00</published><updated>2023-06-19T08:00:00+00:00</updated><id>https://sabbir-ahmed12.github.io/blog/2023/formatting-pendrive-forcefully</id><content type="html" xml:base="https://sabbir-ahmed12.github.io/blog/2023/formatting-pendrive-forcefully/"><![CDATA[<p>Sometimes when we connect our pendrive to a virus infected device, it gets infected. As a result, some files are created automatically inside the pendrive that cannot be deleted when we try to format it. Moreover, virus may also partition the drive the automatically. This problem can be solved by the following method.</p>

<ul>
  <li>
    <p>Go to search option and type <code class="language-plaintext highlighter-rouge">cmd</code>. You should see <code class="language-plaintext highlighter-rouge">Command Prompt</code> option in the dialog box. Right click on the option and select <code class="language-plaintext highlighter-rouge">Run as administrator</code>.</p>
  </li>
  <li>
    <p>On the command prompt window type <code class="language-plaintext highlighter-rouge">diskpart</code> which will turn on the <code class="language-plaintext highlighter-rouge">DISKPART</code> prompt.</p>
  </li>
  <li>
    <p>Type <code class="language-plaintext highlighter-rouge">list disk</code> on the DISKPART prompt. It should list all the available disks. Find out the drive you want to format. <strong><em>Note:</em></strong> Be careful when you select the drive. Once you perform the operation, it cannot be undone.</p>
  </li>
  <li>
    <p>Type <code class="language-plaintext highlighter-rouge">select disk disk_number</code> (e.g., select disk 1). The disk number represents the drive you want to format.</p>
  </li>
  <li>
    <p>Type <code class="language-plaintext highlighter-rouge">clean</code> and hit enter.</p>
  </li>
  <li>
    <p>After that type <code class="language-plaintext highlighter-rouge">create part primary</code> and hit enter and finally type <code class="language-plaintext highlighter-rouge">active</code> and hit enter.</p>
  </li>
</ul>

<p>Voila! Your pendrive should work just fine now. Exit the command prompt and check the pendrive again.</p>]]></content><author><name></name></author><category term="tutorial" /><category term="misc" /><summary type="html"><![CDATA[Tutorial post on formatting an external storage forcefully.]]></summary></entry><entry><title type="html">How to Install App in Linux?</title><link href="https://sabbir-ahmed12.github.io/blog/2023/managing-package-in-linux/" rel="alternate" type="text/html" title="How to Install App in Linux?" /><published>2023-06-19T08:00:00+00:00</published><updated>2023-06-19T08:00:00+00:00</updated><id>https://sabbir-ahmed12.github.io/blog/2023/managing-package-in-linux</id><content type="html" xml:base="https://sabbir-ahmed12.github.io/blog/2023/managing-package-in-linux/"><![CDATA[<p>Unlike windows, linux and unix operating systems (OS) uses package managers to install app. Development platforms like <code class="language-plaintext highlighter-rouge">Node.js</code>, <code class="language-plaintext highlighter-rouge">Python</code> also use package managers (e.g., <code class="language-plaintext highlighter-rouge">npm</code>, <code class="language-plaintext highlighter-rouge">pip</code>) to install packages. A package manager keeps track of what package is installed and helps automate the process of installing, upgrading, configuring, and removing packages in a consistent mannner. Linux uses a package manager called <code class="language-plaintext highlighter-rouge">apt</code> in short form. It stands for <code class="language-plaintext highlighter-rouge">advanced packaging tool</code>. <code class="language-plaintext highlighter-rouge">apt</code> is the newer package manager for linux. We can also use <code class="language-plaintext highlighter-rouge">apt-get</code> which is mostly seen in online tutorials. We’ll use <code class="language-plaintext highlighter-rouge">apt</code> as it is easier to use.</p>

<p>Let’s say we want to install a package called <code class="language-plaintext highlighter-rouge">nano</code>. Nano is an editor mostly used in linux for editing text or code. If <code class="language-plaintext highlighter-rouge">nano</code> is already installed in your system, it will open when you type <code class="language-plaintext highlighter-rouge">nano</code> in your terminal and hit enter. However, if <code class="language-plaintext highlighter-rouge">nano</code> is not available in your system, an error <code class="language-plaintext highlighter-rouge">nano: command not found</code> will appear.</p>

<p>Now if you type <code class="language-plaintext highlighter-rouge">apt install nano</code> in your terminal and hit enter, you’re most likely to get an error such as <code class="language-plaintext highlighter-rouge">Unable to locate package nano</code>. This is because linux did not find that package in the package index list. Apt packages index is a database that stores the list of software packages from the repository. You can check the list of packages by running the command <code class="language-plaintext highlighter-rouge">apt list</code> in your terminal.</p>

<p>To get the updated list of packages, either run <code class="language-plaintext highlighter-rouge">apt update</code> or <code class="language-plaintext highlighter-rouge">sudo apt update</code> to run under the sudo privileges. It will collect the latest packages information from all configured sources defined in the <code class="language-plaintext highlighter-rouge">/etc/apt/sources.list</code> file and the <code class="language-plaintext highlighter-rouge">/etc/apt/sources.list.d</code> directory and download the information about all packages for your repository and PPA’s from the internet. The <code class="language-plaintext highlighter-rouge">apt update</code> command only updates the list of packages, and no package is upgraded by it.</p>

<p>We have an updated list of packages. You can always check whether the list contains <code class="language-plaintext highlighter-rouge">nano</code> package using the <code class="language-plaintext highlighter-rouge">apt list</code> command. In order to install the <code class="language-plaintext highlighter-rouge">nano</code> package, you need to run the <code class="language-plaintext highlighter-rouge">sudo apt install nano</code> command. It will download and install the nano editor. After that you can verify that by typing <code class="language-plaintext highlighter-rouge">nano</code> in the terminal and pressing enter to open the nano editor.</p>

<p>Finally, to remove nano, you need to use the command <code class="language-plaintext highlighter-rouge">sudo apt remove nano</code>. It will remove the package along with its dependencies. To check the list of available <code class="language-plaintext highlighter-rouge">apt</code> soft commands, you can run the <code class="language-plaintext highlighter-rouge">apt</code> command in your terminal.</p>

<p>That’s it. You should now be comfortable with the <code class="language-plaintext highlighter-rouge">apt</code> package manager. Best of luck!</p>]]></content><author><name></name></author><category term="tutorial" /><category term="linux" /><summary type="html"><![CDATA[Tutorial on installing and removing package in linux.]]></summary></entry><entry><title type="html">How Can You Run Multiple Versions of Python on Ubuntu and Create Virtual Environments?</title><link href="https://sabbir-ahmed12.github.io/blog/2023/installing-python-on-ubuntu/" rel="alternate" type="text/html" title="How Can You Run Multiple Versions of Python on Ubuntu and Create Virtual Environments?" /><published>2023-06-17T16:15:00+00:00</published><updated>2023-06-17T16:15:00+00:00</updated><id>https://sabbir-ahmed12.github.io/blog/2023/installing-python-on-ubuntu</id><content type="html" xml:base="https://sabbir-ahmed12.github.io/blog/2023/installing-python-on-ubuntu/"><![CDATA[<p>Maintaining multiple python versions of python on ubuntu becomes a issue of headache sometimes as Ubuntu OS already comes with a pre-installed python. Therefore, changing the system python may affect your Ubuntu OS functionality. In this tutorial, I’ll use <code class="language-plaintext highlighter-rouge">pyenv</code> to work with multiple versions of python.</p>

<h2 id="why-should-you-use-pyenv-and-virtual-python-environments">Why should you use <code class="language-plaintext highlighter-rouge">pyenv</code> and Virtual Python Environments?</h2>

<p>As a programmer or as a hobbyist you may want to work on several python projects simultaneously. And most of the projects require different Python versions and some project may require a specific version of a package e.g. specific version of numpy or django. In such cases you’ll need to install multiple versions of python and will have to install several versions of a specific package and that is when virtual environment is required to maintain several python ecosystems based on various projects in isolation. <code class="language-plaintext highlighter-rouge">pyenv</code> makes it easier to maintain various versions of python on ubuntu and unix based systems as those systems by default contains a python version which they uses for various system operations and we don’t wanna mess up with that python version.</p>

<h2 id="how-to-install-pyenv-on-your-ubuntu">How to install <code class="language-plaintext highlighter-rouge">pyenv</code> on your ubuntu?</h2>

<p>To install <code class="language-plaintext highlighter-rouge">pyenv</code> on Debian or Ubuntu based Linux distributions, you’ll have to install several libraries and packages necessary for building Python from scratch. Enter the following command into your terminal to install all the necessary packages.<br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install -y make build-essential libssl-dev zlib1g-dev \
libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \
libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl \
git
</code></pre></div></div>

<p>To install <code class="language-plaintext highlighter-rouge">pyenv</code> you can clone it directly from <a href="https://github.com/pyenv/pyenv">github</a> repository.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/pyenv/pyenv.git ~/.pyenv
</code></pre></div></div>

<p>After that you need to enter the following commands to add <code class="language-plaintext highlighter-rouge">pyenv</code> to your <code class="language-plaintext highlighter-rouge">$PATH</code>. To see the effect you’ll have to open a new terminal.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo 'export PYENV_ROOT="$HOME/.pyenv"' &gt;&gt; ~/.bashrc
echo 'export PATH="$PYENV_ROOT/bin:$PATH"' &gt;&gt; ~/.bashrc
echo 'eval "$(pyenv init --path)"' &gt;&gt; ~/.bashrc
</code></pre></div></div>

<p><strong>If you use <code class="language-plaintext highlighter-rouge">zsh</code>, use <code class="language-plaintext highlighter-rouge">.zshrc</code> instead of <code class="language-plaintext highlighter-rouge">.bashrc</code>.</strong></p>

<h2 id="using-pyenv">Using <code class="language-plaintext highlighter-rouge">pyenv</code></h2>

<p>If you followed the previous steps successfully, you should be able to use <code class="language-plaintext highlighter-rouge">pyenv</code> from your terminal. Type the following command on your terminal to check whether <code class="language-plaintext highlighter-rouge">pyenv</code> successfully installed or not. It should print the pyenv version.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv --version
</code></pre></div></div>

<p>It you get the <code class="language-plaintext highlighter-rouge">pyenv</code> version, congratulations!. Next step is to install Python of your desired version. First check which Python versions are available to you. For that use the following command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv install -l
</code></pre></div></div>

<p>This command will display the various CPython versions(displays just the versions) along with other Python distributions such as Miniconda and Anaconda. In this tutorial we’ll install a CPython version. Let’s say you want to install CPython version 3.9.7. For that execute the following command on you terminal.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv install 3.9.7
</code></pre></div></div>

<p>It’ll take some time to build and install the desired Python version. However after completion of installation, type the following command to see the available python versions on your system.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv versions
</code></pre></div></div>

<p>You’ll find all the Python versions currently installed on your system and the current global version is indicated by an <code class="language-plaintext highlighter-rouge">*</code> on the left. To change the default global version of Python on your system type the following command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv global [PYTHON_VERSION]
</code></pre></div></div>

<p>Or if you want to use a specific version of python for a specific folder i.e. project, navigate to that directory and execute the command below.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv local [PYTHON_VERSION]
</code></pre></div></div>

<p>Or if you want to set a specific Python version for your current terminal session use.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv shell [PYTHON_VERSION]
</code></pre></div></div>

<p>This will set the Python version only as long as your session is active. So after you close your terminal, everything will be back to default.</p>

<h2 id="method-1-creating-virtual-environment-and-installing-package-on-that-environment">Method-1 Creating Virtual Environment and Installing Package on that Environment</h2>

<p>Python installation includes some basic packages and modules. Your Python version should include <code class="language-plaintext highlighter-rouge">pip</code> module by default. So, set the specific Python version as global Python version. After that open a new terminal and you can close the previous session.</p>

<p>After that install <code class="language-plaintext highlighter-rouge">pipenv</code> using <code class="language-plaintext highlighter-rouge">pip</code> command. It will install some dependencies along with <code class="language-plaintext highlighter-rouge">pipenv</code>. Creating and maintaining virtual environment using <code class="language-plaintext highlighter-rouge">pipenv</code> is much easier.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install pipenv
</code></pre></div></div>

<p>You can check the installed packages on your current Python version using <code class="language-plaintext highlighter-rouge">pip list</code> command.</p>

<p>To create virtual environment navigate to your preferred directory and create a folder. Suppose you want to start a django project, type the following command to install django under a virtual environment.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pipenv install django
</code></pre></div></div>

<p>It’ll create an environment at first and then install the latest django version for that environment. It should successfully install django on a virtual environment. You can activate the environment by navigating to that folder and then executing the following command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pipenv shell
</code></pre></div></div>

<p>After activating the environment, you can run django command. e.g. you can try the following command -</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>django-admin
</code></pre></div></div>

<p>For installation of more packages, run the following command keeping the environment activated.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pipenv install [PACKAGE_NAME]
</code></pre></div></div>

<p>Exit the environment by just typing <code class="language-plaintext highlighter-rouge">exit</code>.</p>

<h3 id="deleting-virtual-environment">Deleting Virtual Environment</h3>

<p>You can delete a specific virtual environment from <code class="language-plaintext highlighter-rouge">~/.local/share/virtualenvs/</code> folder. Or you can delete all the virtual environments using -</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rm -rf ~/.local/share/virtualenvs
</code></pre></div></div>

<h2 id="method-2-creating-virtual-environment-and-installing-package-on-that-environment">Method-2 Creating Virtual Environment and Installing Package on that Environment</h2>

<p><code class="language-plaintext highlighter-rouge">pyenv</code> has a wonderful plugin called <code class="language-plaintext highlighter-rouge">pyenv-virtualenv</code> that makes working with multiple environments easy. Please visit the <a href="https://github.com/pyenv/pyenv-virtualenv">link</a> to install <code class="language-plaintext highlighter-rouge">pyenv-virtualenv</code>. After installation, check if it installed properly by running the command <code class="language-plaintext highlighter-rouge">pyenv commands</code>. You should see the commands <code class="language-plaintext highlighter-rouge">virtualenv, virtualenv-delete, virtualenv-init, virtualenv-prefix, virtualenv</code> listed along with the other commands. You can also update your <code class="language-plaintext highlighter-rouge">.bashrc</code> file as mentioned in the documentation of <code class="language-plaintext highlighter-rouge">pyenv-virtualenv</code>.</p>

<p>To create a virtual environment, first create a directory in your preferred place and go to that directory. Then run the following command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv virtualenv &lt;python_version&gt; &lt;environment_name&gt;
</code></pre></div></div>

<p>If you’ve updated your <code class="language-plaintext highlighter-rouge">.bashrc</code> file, you can activate your environment by running the following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv local &lt;environment_name&gt;
</code></pre></div></div>

<p>It creates a <code class="language-plaintext highlighter-rouge">.python-version</code> file in the directory because it internally runs the bash command `eval “$(pyenv virtualenv-init -)”. You can verify it by running the following command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv which python
</code></pre></div></div>

<p>You can see a new version has been created called <environment_name> and the python executable is pointing to that version.</environment_name></p>

<p>If you didn’t modify your <code class="language-plaintext highlighter-rouge">.bashrc</code> file by adding the command <code class="language-plaintext highlighter-rouge">eval "$(pyenv virtualenv-init -)</code>, you can manually activate/deactivate your python versions with this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv activate &lt;environment_name&gt;
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv deactivate
</code></pre></div></div>

<div>
  <b>NOTE: Setting a specific version of python as global python version may sometime cause problems. I found method-2 more friendly and easier to manage different python versions and python environments.</b>
</div>

<h2 id="removing-a-specific-version-of-python">Removing a Specific Version of Python</h2>

<p>You can uninstall a specific python version using <code class="language-plaintext highlighter-rouge">pyenv</code> using -</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv uninstall [PYTHON_VERSION]
</code></pre></div></div>

<p><strong>Before deleting the active Python version, set the Python version to system default.</strong></p>

<h2 id="updating-packages">Updating packages</h2>

<p>If you want a list of outdated packages, run this to see all the packages needing an upgrade.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pipenv update --outdated
</code></pre></div></div>

<p>You can choose to blindly update all packages.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pipenv update
</code></pre></div></div>

<p>Or you can update a specific package one at a time.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pipenv update pandas
</code></pre></div></div>

<h2 id="installing-from-requirementstxt-file">Installing from Requirements.txt file</h2>

<p>If you have a legacy requirements.txt file, <code class="language-plaintext highlighter-rouge">pipenv</code> can be used for that.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pipenv install -r requirements.txt
</code></pre></div></div>

<p>If you want a generate a requirements.txt file, you can run the following command after activating the environment from you project directory.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip freeze &gt; requirements.txt
</code></pre></div></div>

<h2 id="using-virtual-environment-with-vscode">Using Virtual Environment with VSCode</h2>

<p>Open the directory using VS Code. After that open the workspace using <code class="language-plaintext highlighter-rouge">Ctrl + Shift + p</code> and type <code class="language-plaintext highlighter-rouge">settings.json</code>. Select <code class="language-plaintext highlighter-rouge">Preferences: Open Workspace Settings (JSON)</code> and hit <code class="language-plaintext highlighter-rouge">Enter</code> on your keyboard. It should open an empty JSON file. Now inside the file type the following command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "python.terminal.activateEnvironment": true
}
</code></pre></div></div>

<p>Then go to option <code class="language-plaintext highlighter-rouge">run</code> and select <code class="language-plaintext highlighter-rouge">run without debugging</code>. It should automatically activate the environment everytime you run from that directory.</p>]]></content><author><name></name></author><category term="tutorial" /><category term="linux" /><summary type="html"><![CDATA[Tutorial post on installing and maintaining multiple versions of python along with system python.]]></summary></entry></feed>